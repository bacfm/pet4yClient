'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createDateObjects = require('./createDateObjects');

var _createDateObjects2 = _interopRequireDefault(_createDateObjects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_Component) {
  _inherits(Calendar, _Component);

  function Calendar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.handleNextMonth = function () {
      if (_this.props.onNextMonth) {
        return _this.props.onNextMonth();
      }

      _this.props.onChangeMonth(_this.props.date.clone().add(1, 'months'));
    }, _this.handlePrevMonth = function () {
      if (_this.props.onPrevMonth) {
        return _this.props.onPrevMonth();
      }

      _this.props.onChangeMonth(_this.props.date.clone().subtract(1, 'months'));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Calendar, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          date = _props.date,
          weekOffset = _props.weekOffset,
          renderDay = _props.renderDay,
          renderHeader = _props.renderHeader,
          onPickDate = _props.onPickDate,
          contentClassName = _props.contentClassName,
          containerClassName = _props.containerClassName;


      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('Calendar', containerClassName) },
        renderHeader({
          date: date,
          onPrevMonth: this.handlePrevMonth,
          onNextMonth: this.handleNextMonth
        }),
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)('Calendar-grid', contentClassName) },
          (0, _createDateObjects2.default)(date, weekOffset).map(function (day, i) {
            return renderDay(_extends({}, day, { onPickDate: onPickDate }));
          })
        )
      );
    }
  }]);

  return Calendar;
}(_react.Component);

Calendar.propTypes = {
  /** Week offset*/
  weekOffset: _propTypes2.default.number.isRequired,
  /** The current date as a moment objecct */
  date: _propTypes2.default.object.isRequired,
  /** Function to render a day cell */
  renderDay: _propTypes2.default.func,
  /** Function to render the header */
  renderHeader: _propTypes2.default.func,
  /** Called on next month click */
  onNextMonth: _propTypes2.default.func,
  /** Called on prev month click */
  onPrevMonth: _propTypes2.default.func,
  /** Called when some of the navigation controls are clicked */
  onChangeMonth: _propTypes2.default.func,
  /** Called when a date is clicked */
  onPickDate: _propTypes2.default.func,
  /** classname for div wrapping the whole calendar */
  containerClassName: _propTypes2.default.string,
  /** classname for the div wrapping the grid */
  contentClassName: _propTypes2.default.string
};
Calendar.defaultProps = {
  weekOffset: 0,
  renderDay: function renderDay(_ref2) {
    var day = _ref2.day,
        classNames = _ref2.classNames,
        onPickDate = _ref2.onPickDate;
    return _react2.default.createElement(
      'div',
      {
        key: day.format(),
        className: (0, _classnames2.default)('Calendar-grid-item', day.isSame((0, _moment2.default)(), 'day') && 'Calendar-grid-item--current', classNames),
        onClick: function onClick(e) {
          return onPickDate(day);
        }
      },
      day.format('D')
    );
  },
  renderHeader: function renderHeader(_ref3) {
    var date = _ref3.date,
        onPrevMonth = _ref3.onPrevMonth,
        onNextMonth = _ref3.onNextMonth;
    return _react2.default.createElement(
      'div',
      { className: 'Calendar-header' },
      _react2.default.createElement(
        'button',
        { onClick: onPrevMonth },
        '\xAB'
      ),
      _react2.default.createElement(
        'div',
        { className: 'Calendar-header-currentDate' },
        date.format('MMMM YYYY')
      ),
      _react2.default.createElement(
        'button',
        { onClick: onNextMonth },
        '\xBB'
      )
    );
  }
};
exports.default = Calendar;